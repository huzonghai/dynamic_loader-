apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':sdk_dex')
}

static def releaseTime() {
    return new Date().format("MMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

def channelName = '777'
def jarName = 'sdk.jar'
def dexName = channelName + releaseTime() + ".jar"
def dxComm = "dx --dex --output=${dexName} ${jarName}"
def dxPath = 'D:\\androidConfig\\androidSdk\\sdk\\build-tools\\26.0.0'

task makeJar(type: Copy) {
    delete "build/${jarName}"
    delete "build/${dexName}"
    from('build/intermediates/packaged-classes/release/')
    into('build/')
    include('classes.jar')
    rename('classes.jar', jarName)
}
makeJar.dependsOn(build)

task copyJar(type: Copy) {
    from('build', jarName)
    into('D:\\androidConfig\\androidSdk\\sdk\\build-tools\\26.0.0')
}
copyJar.dependsOn(makeJar)

task buildDex(type: Exec) { task ->
    workingDir dxPath
    commandLine 'cmd', '/c', dxComm
}
buildDex.dependsOn(copyJar)

task makeDex(type: Copy) {
    from("D:\\androidConfig\\androidSdk\\sdk\\build-tools\\26.0.0\\${dexName}")
    into('build')
}
makeDex.dependsOn(buildDex)